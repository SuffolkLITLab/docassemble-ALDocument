---
modules:
  - .al_document
---
objects:
  - cover_page: ALDocument.using(title="Cover page", filename="cover_page", has_addendum=False)
  - template2: ALDocument.using(title="Template 2", filename="template2", has_addendum=True, default_overflow_message = " (see addendum)")
  - minor_release: ALDocument.using(title="Release form", filename="release", has_addendum=False)
  - field4: DAList.using(there_are_any=True)
---
# The document bundle needs to be in a different objects block
# because it relies on the template variables being initialized
objects:
  - court_bundle: ALDocumentBundle.using(elements=[cover_page,template2,minor_release], filename="court_bundle.pdf", title="Forms to download and deliver to court")
---
mandatory: True
code: |
  cover_page.enabled
  if template2.enabled:
    field1
    debug_overflow
    field4.gather()
  preview
  download
---
question: |
  Experiment with overflow
fields:
  - Overflows at 3 lines: field1
    datatype: area
  - Overflows at 20 characters: field2
  - Overflows at 5 characters: field3
---
question: |
  What are your favorite fruits?
subquestion: |
  Up to 2 will fit on the main form. The rest will go on an addendum.
list collect: True
fields:
  - Fruit name: field4[i]
---
code: |
  template2.overflow_fields['field1'].overflow_trigger = 150
  template2.overflow_fields['field2'].overflow_trigger = 20
  template2.overflow_fields['field3'].overflow_trigger = 5
  template2.overflow_fields['field4'].overflow_trigger = 2
  
  template2.overflow_fields.gathered=True
---
continue button field: debug_overflow
question: |
  Safe values
subquestion: |
  Field1: ${ single_to_double_newlines(template2.safe_value('field1', preserve_newlines=True)) }
     
  Field2: ${ template2.safe_value('field2') }
      
  Field3: ${ template2.safe_value('field3') }
      
---
question: |
  Which documents do you want?
fields:
  - Include a cover page: cover_page.enabled
    datatype: yesno
  - Template 2: template2.enabled
    datatype: yesno
---
question: |
  How old are you?
fields:
  - no label: age
    datatype: integer
---
code: |
  # You can use code to trigger a document being enabled, too
  minor_release.enabled = age < 18
---
comment: |
  This could be a common use case for draft/final versions of a document.
  Signature only appears in final document.
  
  You could also watermark the draft version.
question: |
  Sign below
signature: user_signature  
---
continue button field: preview
question: |
  Look at the document below before you sign it
subquestion: |
  ${ court_bundle.preview() }
---
event: download
question: |
  Test
subquestion: |
  
  ${ court_bundle.download_buttons_html() }
  
  Or, download as one file:  
  ${ court_bundle.download_button_html() }
  
# You wouldn't be likely to use attachment code, but you could
# as long as the documents in the bundle were all created by an
# attachment block. It won't work if you mix in uploaded files
attachment code: court_bundle.as_flat_list()
---
attachment:
  - variable name: cover_page[i]
    name: xyz
    filename: xyz
    content: |
      # Cover Page
      
      Some cover page info
---
attachment:
  - variable name: template2[i]
    content: |
      # Example of handling overflow
      
      This document simulates a PDF with fixed field width.
      Any overflow that exceeds character limit for the fields
      below will go to an addendum.
     
      Field1: ${ single_to_double_newlines(template2.safe_value('field1', preserve_newlines=True)) }
     
      Field2: ${ template2.safe_value('field2') }
      
      Field3: ${ template2.safe_value('field3') }
      
      Field 4:
      
      % for fruit in template2.safe_value('field4'):
      * ${ fruit }
      % endfor
      
      % if i=='final':
      ${ user_signature }
      % else:
      [ Your signature here ]
      % endif
---
# The ALDocument class doesn't make use of any of the attributes
# of the attachment block other than the variable name/content.
# Those need to be supplied to the parent ALDocument.
# It does get used on the attachment download/email block if you use
# attachment code on a download screen.
attachment:
  - name: Minor release
    filename: minor_release
    variable name: minor_release[i]
    content: |
      # Information for minors
      
      If you are under 18, we generate this document for your
      parent/guardian to sign.
      
      % if i=='final':
      ${ user_signature }
      % else:
      [ Guardian signature here ]
      % endif      
---
# If it fits your project style, an addendum can be shared for 
# all of the documents in your interview.
# Of course you can also handle each field bespoke.
generic object: ALDocument
attachment:
  - variable name: x.addendum
    content: |
      # Addendum for ${ x.filename }
      
      You can store any arbitrary data you want to pass to the addendum as
      a property of the ALDocument. For example: information that could
      customize a case caption or a running header/footer.
            
      % for field in x.overflow():
      ${ field.field_name }: 
      
      % if isinstance(field.overflow_value(), list):
      % for item in field.overflow_value():
      * ${ item }
      % endfor
      % else:
      > ${ field.overflow_value(overflow_message=x.default_overflow_message) }
      % endif
      
      % endfor