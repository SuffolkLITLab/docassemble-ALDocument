---
id: interview order
mandatory: True
code: |
  cover_page.enabled
  if template2.enabled:
    field1
    field4.gather()
    people.gather()
    # debug_overflow    
  if minor_release.enabled:
    people.gather()
    # debug_minor_addendum
  preview
  download
---
modules:
  - .al_document
---
objects:
  - cover_page: ALDocument.using(title="Cover page", filename="cover_page", has_addendum=False)
  - template2: ALDocument.using(title="Template 2", filename="template2", has_addendum=True, default_overflow_message = " (see addendum)")
  - minor_release: ALDocument.using(title="Release form", filename="release", has_addendum=True)
  - field4: DAList.using(there_are_any=True)
  - people: DAList.using(object_type=Individual,there_are_any=True)
---
question: |
  People
subquestion: |
  One person's information will fit on the main form. The rest will
  go to an addendum.
list collect: True
fields:
  - Name: people[i].name.first
  - Birthdate: people[i].birthdate
  - Address: people[i].address_long
    address autocomplete: True    
  - Height: people[i].height
---
# The document bundle needs to be in a different objects block
# because it relies on the template variables being initialized
objects:
  - court_bundle: ALDocumentBundle.using(elements=[cover_page,template2,minor_release], filename="court_bundle.pdf", title="Forms to download and deliver to court")
---
question: |
  Experiment with overflow
fields:
  - Overflows at 3 lines: field1
    datatype: area
  - Overflows at 20 characters: field2
  - Overflows at 5 characters: field3
---
question: |
  What are your favorite fruits?
subquestion: |
  Up to 2 will fit on the main form. The rest will go on an addendum.
list collect: True
fields:
  - Fruit name: field4[i]
---
code: |
  template2.overflow_fields['field1'].overflow_trigger = 150
  template2.overflow_fields['field2'].overflow_trigger = 20
  template2.overflow_fields['field3'].overflow_trigger = 5
  template2.overflow_fields['field4'].overflow_trigger = 2
  template2.overflow_fields['people'].overflow_trigger=1
  
  template2.overflow_fields.gathered=True
---
code: |
  minor_release.overflow_fields['people'].overflow_trigger=1
  minor_release.overflow_fields.gathered=True
---
continue button field: debug_overflow
question: |
  Safe values
subquestion: |
  Field1: ${ single_to_double_newlines(template2.safe_value('field1', preserve_newlines=True)) }
     
  Field2: ${ template2.safe_value('field2') }
      
  Field3: ${ template2.safe_value('field3') }
  
  People: ${ comma_and_list(template2.safe_value('people')) }
  
  ${ template2.overflow_fields['people'].columns() }
  
  ${ template2.overflow_fields['people'].overflow_markdown() }
---
continue button field: debug_minor_addendum
question: |
  debug
subquestion: |
  ${ minor_release.overflow_fields.defined_fields() }
---
question: |
  Which documents do you want?
comment: |
  [send an email](${ url_action('send_the_email', al_attachment=pdf_concatenate(cover_page['final']) )})
fields:
  - Include a cover page: cover_page.enabled
    datatype: yesno
  - Template 2: template2.enabled
    datatype: yesno
---
question: |
  How old are you?
fields:
  - no label: age
    datatype: integer
---
code: |
  # You can use code to trigger a document being enabled, too
  minor_release.enabled = age < 18
---
comment: |
  This could be a common use case for draft/final versions of a document.
  Signature only appears in final document.
  
  You could also watermark the draft version.
question: |
  Sign below
signature: user_signature  
---
continue button field: preview
question: |
  Look at the document below before you sign it
subquestion: |
  ${ court_bundle.preview() }
---
event: download
question: |
  Test
subquestion: |
  ${ court_bundle.download_buttons_html() }
  
  Or, download as one file:  
  ${ court_bundle.download_button_html() }
  
  You wouldn't be likely to use attachment code, but you could
  as long as the documents in the bundle were all created by an
  attachment block. It won't work if you mix in uploaded files
  
  ${ court_bundle.send_bundle_action_html( 'send_court_bundle' ) }

attachment code: court_bundle.as_flat_list()
---
event: send_court_bundle
code: |
  court_bundle.send_email(to=action_argument('email'), template=document_email, wants_editable=action_argument('wants_edit'), key='final')
---
template: document_email
subject: |
  Your documents
content: |
  Here are all your documents.
---
event: send_the_email
code: |
  the_attachment = action_argument('al_attachment')
  send_email(to=al_to_email, attachments=the_attachment, subject="Here are your documents")
---
attachment:
  - variable name: cover_page[i]
    name: xyz
    filename: xyz
    content: |
      # Cover Page
      
      Some cover page info
---
attachment:
  - variable name: template2[i]
    content: |
      # Example of handling overflow
      
      This document simulates a PDF with fixed field width.
      Any overflow that exceeds character limit for the fields
      below will go to an addendum.
     
      Field1: ${ single_to_double_newlines(template2.safe_value('field1', preserve_newlines=True)) }
     
      Field2: ${ template2.safe_value('field2') }
      
      Field3: ${ template2.safe_value('field3') }
      
      Field 4:
      
      % for fruit in template2.safe_value('field4'):
      * ${ fruit }
      % endfor
      
      People: ${ comma_and_list(template2.safe_value('people')) }
      
      % if i=='final':
      ${ user_signature }
      % else:
      [ Your signature here ]
      % endif
---
# The ALDocument class doesn't make use of any of the attributes
# of the attachment block other than the variable name/content.
# Those need to be supplied to the parent ALDocument.
# It does get used on the attachment download/email block if you use
# attachment code on a download screen.
attachment:
  - name: Minor release
    filename: minor_release
    variable name: minor_release[i]
    content: |
      # Information for minors
      
      If you are under 18, we generate this document for your
      parent/guardian to sign.
      
      % if i=='final':
      ${ user_signature }
      % else:
      [ Guardian signature here ]
      % endif      
---
# This block shows how to create a custom addendum
# This one will use a Docx instead to demonstrate how tables work in a 
# docx addendum. The addendum is triggered by having multiple
# people when the user is a minor.
attachment:
  - variable name: minor_release.addendum
    docx template file: docx_addendum.docx
---
# If it fits your project style, an addendum can be shared for 
# all of the documents in your interview.
# Of course you can also handle each field bespoke.
generic object: ALDocument
attachment:
  - variable name: x.addendum
    content: |
      # Addendum for ${ x.filename }
      
      You can store any arbitrary data you want to pass to the addendum as
      a property of the ALDocument. For example: information that could
      customize a case caption or a running header/footer.
      
      When the item that overflows is a list of objects, our module
      can grab all of the attributes and display them in a table. You can
      customize the labels and the order for each column by setting the
      "headers" attribute of the field to a list of dictionaries.
            
      % for field in x.overflow():
      ${ field.field_name }: 
      
      % if field.is_object_list():
      ${ field.overflow_markdown() }
      % else:
      > ${ field.overflow_value(overflow_message=x.default_overflow_message) }
      % endif
      % endfor
---
question: |
  Share your documents
fields:
  - Email address: al_to_email
    datatype: email
continue button label: Send email
---
event: send_the_email
code: |
  the_attachment = action_argument('al_attachment')
  send_email(to=al_to_email, attachments=the_attachment, subject="Here are your documents")
---
template: email_docs
content: |
  ${ action_button_html }